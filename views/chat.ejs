<%- include("templates/header") %>

    <div>
        <!-- Title on top -->
        <div style="display: flex;align-items: center;justify-content: center;">
            <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" style="fill: white; margin-right: 10px;">
                <!-- Add your SVG icon code here -->
                <%- include("./icons/chat-2") %>
            </svg>
            <h1 style="text-align: left; color: white; font-size: 3rem; line-height: 50px; margin: 0;">Chats</h1>
        </div>

        <!-- Caption for title -->
        <div style="display: flex;align-items: center;justify-content: center;">
            <p style="text-align: left; color: white">
                Chat with other users within your Pods here.
            </p>
        </div>
        <hr>

        <div class="chat-form">
            <ul id="chatbox"></ul>
            <div>
                <input class="chat-text" type="text" id="message">
                <button class="blue-button btn" onclick="sendMessage()">Send</button>
                <button class="btn blue-button" onclick="createNode()">Create Node</button>
                <button class="btn blue-button" onclick="fetchChats()">Fetch Chats</button>
            </div>
        </div>
        <div class="chat-list-container">
            <ul id="chatList" class="chat-list"></ul>
        </div>
    </div>
    <%- include("templates/footer") %>

        <style>
            .chat-message-content {
                font-size: 14px;
            }

            .chat-timestamp {
                font-size: 8px;
                display: block;
                margin-top: 5px;
            }

            .user-image {
                width: 30px;
                height: 30px;
                border-radius: 50%;
                margin-right: 5px;
            }

            #chatbox {
                /* border: 1px solid #ccc; */
                max-height: 50vh;
                /* Set a fixed height for the chatbox */
                overflow: auto;
                list-style: none;
                padding: 0;
            }

            .chat-message {
                font-size: 20px;
                max-width: auto;
                word-wrap: break-word;
                overflow-wrap: break-word;
                word-break: break-word;
            }

            /* SYSTEM MESSAGE */
            .system {
                max-width: 100%;
                background-color: #787878;
                border-radius: 20px;
                padding: 5px 20px;
                margin-bottom: 10px;
                color: #ffffff;
            }

            /* Your messages */
            .outgoing {
                max-width: 60%;
                background: #4676EE;
                border-radius: 20px;
                padding: 10px 0 10px 10px;
                margin-bottom: 5px;
                margin-left: auto;
                color: white;
                position: relative;
            }

            /* Other messages */
            .incoming {
                max-width: 60%;
                background-color: #e9e9eb;
                border-radius: 20px;
                padding: 5px 10px;
                margin-bottom: 5px;
                text-align: left;
            }

            /* USERNAME */
            .chat-username {
                font-weight: bold;
                color: black;
                font-size: medium;
            }

            .chat-form {
                display: flex;
                flex-direction: column;
                padding: 20px;
                background-color: #f8f9fa;
                border-radius: 20px;
                text-align: left;
                position: relative;
            }

            .chat-input-container {
                display: flex;
                align-items: center;
            }

            .chat-text {
                width: 100%;
                /* height: 10vh; */
                border-radius: 20px;
                border: 1px solid #ced4da;
                padding: 10px;
                margin-bottom: 10px;
                margin-left: auto;
            }

            .delete-button-container {
                position: absolute;
                top: -5px;
                /* Adjust the vertical position as needed */
                right: 10px;
                /* Adjust the horizontal position as needed */
            }

            .delete-button {
                background-color: red;
                color: white;
                border: none;
                border-radius: 50%;
                padding: 5px 10px;
                cursor: pointer;
            }

            .deleted-message {
                background: #cccccc;
            }

            .deleted-message .chat-username,
            .deleted-message .deleted-message-content {
                color: #888888;
            }

            .chat-list-container {
                display: flex;
                overflow-x: auto;
            }

            .chat-list {
                display: flex;
                list-style: none;
                padding: 0;
                margin: 0;
            }

            .chat-list-item {
                margin-right: 10px;
            }
        </style>


        <script src="https://www.gstatic.com/firebasejs/8.7.0/firebase-app.js"></script>
        <script src="https://www.gstatic.com/firebasejs/8.7.0/firebase-database.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

        <script>
            // Initialize Firebase
            var firebaseConfig = {
                databaseURL: "https://orcachat-896f1-default-rtdb.firebaseio.com/",
                apiKey: "AIzaSyCqohTy2xTnkLispHSq2TGRP2VDyhRcEB0",
                authDomain: "orcachat-896f1.firebaseapp.com",
                projectId: "orcachat-896f1",
                storageBucket: "orcachat-896f1.appspot.com",
                messagingSenderId: "1069412700995",
                appId: "1:1069412700995:web:c4b568bb2df7c9351055f6"
            };

            firebase.initializeApp(firebaseConfig);
        </script>

        <script>
            // Get the chat name from the URL parameter
            var urlParams = new URLSearchParams(window.location.search);
            var chatName = urlParams.get('name');

            function sendMessage() {
                // Check if the chat name is empty or not available
                if (!chatName) {
                    console.error('Chat name is not provided.');
                    return;
                }

                var messageInput = document.getElementById('message');
                var message = messageInput.value;

                // Check if the message is empty
                if (message === '') {
                    return; // Return without sending the message
                }

                // Get the username from the session or any other source
                var username = "<%= user.username %>";
                // Get the user's image URL from your data source
                var userImage = "<%= user.image %>";

                // Set the default image URL if it is not available
                var imageUrl = userImage || "/images/orca_pfp.jpg";

                // Generate a unique ID for the message
                var messageId = firebase.database().ref().child(chatName).push().key;

                // Save the message, username, image URL, and messageId to Firebase Realtime Database
                firebase.database().ref(chatName + '/' + messageId).set({
                    messageId: messageId, // Add the messageId to the message object
                    content: message,
                    username: username,
                    imageUrl: imageUrl,
                    timestamp: Date.now()
                });

                // Clear the input field
                messageInput.value = '';
            }

            function deleteMessage(message) {
                // Check if the chat name is empty or not available
                if (!chatName) {
                    console.error('Chat name is not provided.');
                    return;
                }
                var messageId = message.messageId;

                // Check if the message is already deleted
                var messageElement = document.getElementById(messageId);
                if (messageElement.classList.contains('deleted-message')) {
                    return; // Abort deletion if the message is already deleted
                }

                // Display a confirmation modal
                var confirmDelete = confirm('Are you sure you want to delete this message?');
                if (!confirmDelete) {
                    return; // Abort deletion if the user cancels
                }

                firebase
                    .database()
                    .ref(chatName + '/' + messageId)
                    .remove()
                    .then(() => {
                        var messageElement = document.getElementById(messageId);

                        // Update the message content to show it was deleted
                        var contentElement = messageElement.querySelector('.chat-message-content');
                        contentElement.innerHTML = 'Deleted message';

                        // Add a CSS class to visually indicate the message was deleted
                        messageElement.classList.add('deleted-message');
                    })
                    .catch((error) => {
                        console.error('Error deleting message:', error);
                    });
            }

            function displayMessage(message) {
                var listItem = document.createElement('li');
                var chatMessage = document.createElement('div');

                // Add the message to the list
                chatMessage.classList.add('chat-message');
                chatMessage.setAttribute('id', message.messageId);

                // Add the username and message content to the message
                if (message.username !== 'System') {
                    var sender = document.createElement('span');
                    sender.classList.add('chat-username');
                    sender.innerHTML =
                        '<img src="' +
                        message.imageUrl +
                        '" alt="pfp" class="user-image">' +
                        '@' +
                        message.username +
                        '<br>';
                    chatMessage.appendChild(sender);
                }

                if (message.username === '<%= user.username %>') {
                    // Turn the message into an outgoing message
                    chatMessage.classList.add('outgoing');

                    // Add the delete button container
                    var deleteButtonContainer = document.createElement('span');
                    deleteButtonContainer.classList.add('delete-button-container');

                    // Add the delete button to the container if it is not already deleted
                    if (!message.deleted) {
                        var deleteButton = document.createElement('button');
                        deleteButton.classList.add('delete-button');
                        deleteButton.innerHTML = 'X';
                        deleteButton.addEventListener('click', function () {
                            deleteMessage(message);
                        });
                        deleteButtonContainer.appendChild(deleteButton);
                    }

                    // Add the delete button container to the message
                    chatMessage.appendChild(deleteButtonContainer);
                } else if (message.username === 'System') {
                    // Turn the message into a system message
                    chatMessage.classList.add('system');
                } else {
                    // Turn the message into an incoming message
                    chatMessage.classList.add('incoming');
                }

                // Make sure the chatbox is scrolled to the bottom to show the latest messages
                var chatbox = document.getElementById('chatbox');
                var shouldScroll =
                    chatbox.scrollTop + chatbox.clientHeight === chatbox.scrollHeight;

                // Add the message content to the message
                var contentElement = document.createElement('span');
                contentElement.classList.add('chat-message-content');

                // Check if the message is already deleted
                if (message.deleted) {
                    contentElement.innerHTML = 'Deleted message';
                    chatMessage.classList.add('deleted-message');
                } else {
                    contentElement.innerHTML = message.content;
                }

                // Create a timestamp element
                var timestampElement = document.createElement('span');
                timestampElement.classList.add('chat-timestamp');
                var timestamp = new Date(message.timestamp);
                var formattedTimestamp =
                    timestamp.toLocaleString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        hour: 'numeric',
                        minute: 'numeric',
                        hour12: true
                    });
                timestampElement.textContent = formattedTimestamp;

                // Append the timestamp element to the content element
                contentElement.appendChild(timestampElement);

                chatMessage.appendChild(contentElement);

                listItem.appendChild(chatMessage);

                chatbox.appendChild(listItem);

                if (shouldScroll) {
                    chatbox.scrollTop = chatbox.scrollHeight;
                }
            }


            // Listen for changes in the Firebase Realtime Database
            firebase.database().ref('chatName').on('child_added', function (snapshot) {
                var message = snapshot.val();
                displayMessage(message);
            });

            // Listen for changes in the Firebase Realtime Database
            if (chatName) {
                firebase.database().ref(chatName).on('child_added', function (snapshot) {
                    var message = snapshot.val();
                    displayMessage(message);
                });
            }

            function fetchChats() {
                // Fetch the list of available chats
                firebase
                    .database()
                    .ref()
                    .once('value')
                    .then((snapshot) => {
                        var chats = snapshot.val();
                        if (chats) {
                            // Clear the chat list container
                            var chatListContainer = document.getElementById('chatList');
                            chatListContainer.innerHTML = '';

                            // Create a scrollable list container
                            var listContainer = document.createElement('div');
                            listContainer.classList.add('chat-list-container');
                            chatListContainer.appendChild(listContainer);

                            // Create a horizontal scrollable list
                            var chatList = document.createElement('ul');
                            chatList.classList.add('horizontal-scroll');

                            // Loop through the chats and create a button for each chat
                            for (var chat in chats) {
                                var listItem = document.createElement('li');
                                var chatButton = document.createElement('button');
                                chatButton.classList.add('btn', 'blue-button');
                                chatButton.innerHTML = chat;
                                chatButton.addEventListener('click', function () {
                                    // Redirect to the chat page with the selected chat name
                                    window.location.href = '/chat?name=' + this.innerHTML;
                                });
                                listItem.appendChild(chatButton);
                                chatList.appendChild(listItem);
                            }

                            // Add the horizontal scrollable list to the container
                            listContainer.appendChild(chatList);
                        }
                    })
                    .catch((error) => {
                        console.error('Error fetching chats:', error);
                    });
            }

            function createNode() {
                // Get the current count of nodes
                firebase.database().ref('nodeCount').once('value')
                    .then(snapshot => {
                        var count = snapshot.val() || 0; // If no count exists, initialize it to 0
                        count++; // Increment the count

                        // Generate the node name
                        var nodeName = 'PodChat' + count;

                        // Update the count in the database
                        firebase.database().ref('nodeCount').set(count)
                            .then(() => {
                                // Generate a unique push key for the messages object
                                var messagesKey = firebase.database().ref().child(nodeName).push().key;

                                // Create the new node in the database at the same level as "messages"
                                firebase.database().ref().child(nodeName).set({
                                    // Use the push key as the key for the messages object
                                    [messagesKey]: {
                                        username: 'System',
                                        content: 'Welcome to your new Pod Chat! Be nice to everyone :)',
                                        timestamp: Date.now()
                                    }
                                })
                                    .then(() => {
                                        console.log('New chat created successfully.');
                                        console.log('New chat name:', nodeName); // Print the new chat name in the console

                                        // Fetch the list of available chats
                                        firebase.database().ref().once('value')
                                            .then(snapshot => {
                                                var chats = snapshot.val();
                                                if (chats) {
                                                    // Clear the chat list container
                                                    var chatListContainer = document.getElementById('chatList');
                                                    chatListContainer.innerHTML = '';

                                                    // Loop through the chats and create a list item for each chat
                                                    for (var chat in chats) {
                                                        var listItem = document.createElement('li');
                                                        listItem.innerHTML = '<a href="/chat?name=' + chat + '">' + chat + '</a>';
                                                        chatListContainer.appendChild(listItem);
                                                    }
                                                }
                                            })
                                            .catch(error => {
                                                console.error('Error fetching chats:', error);
                                            });
                                    })
                                    .catch(error => {
                                        console.error('Error creating new node:', error);
                                    });
                            })
                            .catch(error => {
                                console.error('Error updating node count:', error);
                            });
                    })
                    .catch(error => {
                        console.error('Error retrieving node count:', error);
                    });
            }

        </script>